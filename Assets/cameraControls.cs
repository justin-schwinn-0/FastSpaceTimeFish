//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/cameraControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CameraControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CameraControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""cameraControls"",
    ""maps"": [
        {
            ""name"": ""camera"",
            ""id"": ""f3fbf24b-ba50-4044-9324-24f6781f8565"",
            ""actions"": [
                {
                    ""name"": ""move camera"",
                    ""type"": ""Value"",
                    ""id"": ""ee017841-47e2-414a-a4a3-f1faf2475f30"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""vertical Look"",
                    ""type"": ""Value"",
                    ""id"": ""2dac802a-d3c8-43f0-bb0c-5be3520be99d"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b43533b9-3036-4f50-ba7b-11c2a9a690a3"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": ""InvertVector2"",
                    ""groups"": """",
                    ""action"": ""move camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""4d8c5a20-b414-4d1c-945d-648c1b20a2c5"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move camera"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""190aa88e-d84e-4d7e-a255-d6492aed30c9"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": ""Clamp(max=2),Scale(factor=10)"",
                    ""groups"": """",
                    ""action"": ""move camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9600f5f6-24f0-4ab7-a224-8ec10435f959"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": ""Clamp(max=2),Scale(factor=10)"",
                    ""groups"": """",
                    ""action"": ""move camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5245782d-01b2-49d0-b178-d32f5e656641"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": ""Scale(factor=1.5)"",
                    ""groups"": """",
                    ""action"": ""move camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ddc23471-5769-4a47-81d1-81d9da4b54de"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": ""Invert,Scale(factor=1.5)"",
                    ""groups"": """",
                    ""action"": ""move camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4724a537-c430-48e5-aceb-fbaf2580a22f"",
                    ""path"": ""<Mouse>/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""vertical Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // camera
        m_camera = asset.FindActionMap("camera", throwIfNotFound: true);
        m_camera_movecamera = m_camera.FindAction("move camera", throwIfNotFound: true);
        m_camera_verticalLook = m_camera.FindAction("vertical Look", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // camera
    private readonly InputActionMap m_camera;
    private ICameraActions m_CameraActionsCallbackInterface;
    private readonly InputAction m_camera_movecamera;
    private readonly InputAction m_camera_verticalLook;
    public struct CameraActions
    {
        private @CameraControls m_Wrapper;
        public CameraActions(@CameraControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @movecamera => m_Wrapper.m_camera_movecamera;
        public InputAction @verticalLook => m_Wrapper.m_camera_verticalLook;
        public InputActionMap Get() { return m_Wrapper.m_camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void SetCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterface != null)
            {
                @movecamera.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnMovecamera;
                @movecamera.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnMovecamera;
                @movecamera.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnMovecamera;
                @verticalLook.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnVerticalLook;
                @verticalLook.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnVerticalLook;
                @verticalLook.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnVerticalLook;
            }
            m_Wrapper.m_CameraActionsCallbackInterface = instance;
            if (instance != null)
            {
                @movecamera.started += instance.OnMovecamera;
                @movecamera.performed += instance.OnMovecamera;
                @movecamera.canceled += instance.OnMovecamera;
                @verticalLook.started += instance.OnVerticalLook;
                @verticalLook.performed += instance.OnVerticalLook;
                @verticalLook.canceled += instance.OnVerticalLook;
            }
        }
    }
    public CameraActions @camera => new CameraActions(this);
    public interface ICameraActions
    {
        void OnMovecamera(InputAction.CallbackContext context);
        void OnVerticalLook(InputAction.CallbackContext context);
    }
}
